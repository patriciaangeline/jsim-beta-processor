*******************************************************************************
* Corpuz, Jianna Marie
* Gregorio, Sophia Avielle
* Tan, Patricia Angeline
*******************************************************************************

.include "8clocks.jsim"
.include "nominal.jsim"
.include "stdcell.jsim"


.subckt fx a b c d e f g OUT
    Xnand1 a b c o1 nand3
    Xnand2 d e o2 nand2
    Xnand3 f g o3 nand2
    Xnand4 o1 o2 o3 OUT nand3
.ends


*** FULL ADDER ***
.subckt fa x y c d e
    Xsub1 x y sum1 xor2
    Xsub2 x y carry1 nand2
    Xsub3 c sum1 d xor2
    Xsub4 c sum1 carry2 nand2
    Xsub5 carry1 carry2 e nand2
.ends


*** 32-BIT ADDER ***
.subckt add32 a[31:0] b[31:0] c_in0 sum[31:0] c_out[31:30]
    Xfa a[31:0] b[31:0] c_out[30:0] c_in0 sum[31:0] c_out[31:0] fa
.ends


*** 32-BIT COUNTER ***
.subckt counter32 reset a[31:0] f[31:0] clk
    Xadd32 f[31:0] a[31:0] 0 sum[31:0] c_out[31:30] add32
    Xmux2 reset#32 sum[31:0] 0#32 z[31:0] mux2
    Xdreg z[31:0] clk#32 f[31:0] dreg
.ends 


*** 32-BIT ADDER SUBTRACTOR ***
.subckt as32 a[31:0] b[31:0] op0 fas[31:0] n v z
    
    Xxor1 b[31:0] op0#32 b_in[31:0] xor2
    Xadd32 a[31:0] b_in[31:0] op0 fas[31:0] c_out[31:30] add32
    *Finding Negative -> n = fas31
    .connect n fas31

    *Finding Overflow (v)
    Xxor2 c_out31 c_out30 v xor2

    *Create 32-input OR
    Xnor1 fas[31:24] fas[23:16] fas[15:8] fas[7:0] nor_out[7:0] nor4
    Xnand5 nor_out[7:6] nor_out[5:4] nor_out[3:2] nor_out[1:0] nand_out[1:0] nand4
    Xnor3 nand_out0 nand_out1 z nor2 
.ends


*** 32-BIT COMPARATOR ***
.subckt cmp32 n v z op[2:1] fcmp[31:0]
    Xcomparexor n v xorout xor2
    Xequal op1 z equalout nand2
    Xless op2 xorout lessout nand2
    Xcompareor lessout equalout fcmp0 nand2
    .connect fcmp[31:1] 0
.ends


*** 32-BIT BOOLEAN ***
.subckt bool32 a[31:0] b[31:0] op[3:0] fbool[31:0]
    Xbmux a[31:0] b[31:0] op0#32 op1#32 op2#32 op3#32 fbool[31:0] mux4
.ends


*** 32-BIT SHIFTER *** 
.subckt shift32 a[31:0] b[4:0] op[1:0] fshift[31:0]
    *Xshift1 op[1:0] a[31:0] b[4:0] oneshiftout mux2

    *for the padding
    Xandpad a31 op1 padout and2 
    
    *for the mirroring
    Xfliptop op0#32 a[0:31] a[31:0] chosenone[31:0] mux2

    *shifting process
    Xshift0 b4#32 chosenone[31:0] padout#16 chosenone[31:16] oneshiftout[31:0] mux2
    Xshift1 b3#32 oneshiftout[31:0] padout#8 oneshiftout[31:8] twoshiftout[31:0] mux2
    Xshift2 b2#32 twoshiftout[31:0] padout#4 twoshiftout[31:4] threeshiftout[31:0] mux2
    Xshift3 b1#32 threeshiftout[31:0] padout#2 threeshiftout[31:2] fourshiftout[31:0] mux2
    Xshift4 b0#32 fourshiftout[31:0] padout#1 fourshiftout[31:1] finalshiftout[31:0] mux2
    
    Xmirror op0#32 finalshiftout[0:31] finalshiftout[31:0] fshift[31:0] mux2
.ends


*** 32-BIT ARITHMETIC LOGIC UNIT ***
.subckt alu32 a[31:0] b[31:0] alufn[5:0] f[31:0]

    * alufn[5:4] - determines circuit operation (if as, cmp, bool, shift)
    * alufn[3:0] - determines what kind of operation the circuit does (if add, subtract, etc.)

    * alufn5 alufn4 f
    * 0 0 as32
    * 0 1 bool32
    * 1 0 shift32
    * 1 1 cmp32

    * if alufn[5:4] for s0 and s1
    Xfmux alufn5#32 alufn4#32 fas32[31:0] fshift32[31:0] fbool32[31:0] fcmp32[31:0] f[31:0] mux4 
    Xas32 a[31:0] b[31:0] alufn0 fas32[31:0] n v z as32 
    Xbool32 a[31:0] b[31:0] alufn[3:0] fbool32[31:0] bool32 
    Xshift32 a[31:0] b[4:0] alufn[1:0] fshift32[31:0] shift32 
    Xcmp32 n v z alufn[2:1] fcmp32[31:0] cmp32 

.ends


*** 32-BIT NOR GATE/Z CHECKER ***
.subckt nor32 a[31:0] z_norout

    Xnor4 a[31:24] a[23:16] a[15:8] a[7:0] norout[7:0] nor4
    Xnor5 norout[7:6] norout[5:4] norout[3:2] norout[1:0] secondnorout[1:0] nand4
    Xnor6 secondnorout0 secondnorout1 z_norout nor2
    
.ends